# Pre-requisites
1. Create 2 AWS EC2 Instances manually from AWS Console, one each for the master (control plane) and worker (slave) node.
2. Master = 2vCPU, 2GB RAM; Worker = 1 vCPU, 2GB RAM
3. On master and worker nodes, become root.
4. On master
##single-node-kund cluster
#install docker
1. sudo apt install docker.io -y

# How to install kind
# For AMD64 / x86_64
1. [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
# For ARM64
2. [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-arm64
3. chmod +x ./kind
4. sudo mv ./kind /usr/local/bin/kind
  
# to create a cluster and cluster name = cka-cluster-1
1. kind create cluster --image kindest/node:v1.31.9@sha256:b94a3a6c06198d17f59cca8c6f486236fa05e2fb359cbd75dabbfc348a10b211 --name cka-cluster-1 
  
2. Install kubectl
  curl -LO https://dl.k8s.io/release/v1.33.0/bin/linux/amd64/kubectl
  install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

# This command we use if we have multiple branches, and shows us which cluster is running
3.  kubectl cluster-info --context kind-cka-cluster-1
  kubectl get nodes

# You can create a multi-node cluster with the following config:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
# One control plane node and three "workers".
#
# While these will not add more real compute capacity and
# have limited isolation, this can be useful for testing
# rolling updates, etc.
#
# The API-server and other control plane components will be
# on the control-plane node.
#
# You probably don't need this unless you are testing Kubernetes itself.
  
vim config.yaml
nodes:
- role: control-plane
- role: worker
- role: worker
- role: worker
:wq!
 kind create cluster --image kindest/node:v1.31.9@sha256:b94a3a6c06198d17f59cca8c6f486236fa05e2fb359cbd75dabbfc348a10b211 --name cka-cluster-2 --config config.yaml
   kubectl cluster-info --context kind-cka-cluster-2
  kubectl get nodes
  
